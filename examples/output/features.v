// Generated by Wyre compiler 0.1.0

module some_module(
	input clk,
	input [3:0] a,
	input [3:0] b,
	output [3:0] some_output,
	output [3:0] some_output2
);

wire [3:0] some_wire;
wire [3:0] some_wire2;
wire [7:0] foo;
wire [7:0] bar;
wire [7:0] bar2;
wire [3:0] hex;
wire [3:0] hex2;
(* keep *) reg [3:0] some_reg = 4'd15;
(* keep *) reg [3:0] some_reg2 = 4'd15;
(* keep *) reg [3:0] some_reg3 = 0;
(* keep *) reg [3:0] other_reg = 0;
wire [3:0] nested_wire;
wire [3:0] negated;
wire [3:0] inverted;
wire [31:0] extended_wire;
wire [3:0] op_add;
wire [3:0] op_subtract;
wire [3:0] op_and;
wire [3:0] op_or;
wire [3:0] op_xor;
wire op_compare;
wire [3:0] op_shl;
wire [3:0] op_shr;
wire [3:0] c;
wire msb;
wire [2:0] rest;
wire [3:0] recombined;
wire [29:0] repeated_wire;
wire [3:0] match_result;
wire [1:0] local;
wire [7:0] baz;
wire [7:0] sub_output_1;
wire [7:0] sub2_output_1;
wire [7:0] sub3_output_1;

assign some_wire = (a) + (b);
assign some_wire2 = (a) + (b);
assign foo = 8'd170;
assign bar = 3;
assign bar2 = 8'd3;
assign hex = 10;
assign hex2 = 4'd10;
assign some_output = (a) | (b);
assign some_output2 = (a) | (b);
assign nested_wire = (some_reg) + (other_reg);
assign negated = -(a);
assign inverted = ~(a);
assign extended_wire = zx(a);
assign op_add = (a) + (b);
assign op_subtract = (a) - (b);
assign op_and = (a) & (b);
assign op_or = (a) | (b);
assign op_xor = (a) ^ (b);
assign op_compare = (a) == (b);
assign op_shl = (a) << (1);
assign op_shr = (a) >> (1);
assign c = ((some_wire) == (3)) ? (a) : (b);
assign msb = a[3];
assign rest = a[2:0];
assign recombined = { a[3], a[2:0] };
assign repeated_wire = { a[2:0], a[2:0], a[2:0], a[2:0], a[2:0], a[2:0], a[2:0], a[2:0], a[2:0], a[2:0] };
assign match_result = 
assign local = some_wire[1:0];
	(((local) == 2'd0) ? ((a) & (b)) :
	(((local) == 2'd1) ? ((a) | (b)) :
	(((local) == 2'd2) ? ((a) ^ (b)) :
	(((local) == 2'd3) ? ((a) & (~(b))) : 4'bxxxx))));
assign baz = sub_output_1;

always @(posedge clk) begin
	some_reg <= 1;
	if ((a) == (4'd5)) begin
		some_reg2 <= 2;
		other_reg <= 3;
	end else begin
		some_reg2 <= 15;
	end
end
always @(negedge clk) begin
	some_reg3 <= b;
end

(* keep *) sub sub(
	.x(8),
	.y(5),
	.output_1(sub_output_1)
);

(* keep *) sub2 sub2(
	.x(8'bxxxxxxxx),
	.y(5),
	.output_1(sub2_output_1)
);

(* keep *) sub3 sub3(
	.x(8'bxxxxxx00),
	.y(5),
	.output_1(sub3_output_1)
);

endmodule

module sub(
	input [7:0] x,
	input [7:0] y,
	output [7:0] output_1
);

assign output_1 = (x) - (y);

endmodule

module sub2(
	input [7:0] x,
	input [7:0] y,
	output [7:0] output_1
);

assign output_1 = (x) - (y);

endmodule

module sub3(
	input [7:0] x,
	input [7:0] y,
	output [7:0] output_1
);

assign output_1 = (x) - (y);

endmodule
